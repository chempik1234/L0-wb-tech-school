// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
)

// Merged schema.
// Ref: #/components/schemas/BadRequestErrorResponse
type BadRequestErrorResponse struct {
	// Merged property.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *BadRequestErrorResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *BadRequestErrorResponse) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestErrorResponse) orderIDGetRes() {}

// Ref: #/components/schemas/Delivery
type Delivery struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Zip     string `json:"zip"`
	City    string `json:"city"`
	Address string `json:"address"`
	Region  string `json:"region"`
	Email   string `json:"email"`
}

// GetName returns the value of Name.
func (s *Delivery) GetName() string {
	return s.Name
}

// GetPhone returns the value of Phone.
func (s *Delivery) GetPhone() string {
	return s.Phone
}

// GetZip returns the value of Zip.
func (s *Delivery) GetZip() string {
	return s.Zip
}

// GetCity returns the value of City.
func (s *Delivery) GetCity() string {
	return s.City
}

// GetAddress returns the value of Address.
func (s *Delivery) GetAddress() string {
	return s.Address
}

// GetRegion returns the value of Region.
func (s *Delivery) GetRegion() string {
	return s.Region
}

// GetEmail returns the value of Email.
func (s *Delivery) GetEmail() string {
	return s.Email
}

// SetName sets the value of Name.
func (s *Delivery) SetName(val string) {
	s.Name = val
}

// SetPhone sets the value of Phone.
func (s *Delivery) SetPhone(val string) {
	s.Phone = val
}

// SetZip sets the value of Zip.
func (s *Delivery) SetZip(val string) {
	s.Zip = val
}

// SetCity sets the value of City.
func (s *Delivery) SetCity(val string) {
	s.City = val
}

// SetAddress sets the value of Address.
func (s *Delivery) SetAddress(val string) {
	s.Address = val
}

// SetRegion sets the value of Region.
func (s *Delivery) SetRegion(val string) {
	s.Region = val
}

// SetEmail sets the value of Email.
func (s *Delivery) SetEmail(val string) {
	s.Email = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// Error message.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

func (*ErrorResponse) orderIDGetRes() {}

// Merged schema.
// Ref: #/components/schemas/NotFoundErrorResponse
type NotFoundErrorResponse struct {
	// Merged property.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *NotFoundErrorResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *NotFoundErrorResponse) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundErrorResponse) orderIDGetRes() {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OrderItem
type OrderItem struct {
	ChrtID      int64  `json:"chrt_id"`
	TrackNumber string `json:"track_number"`
	Price       int    `json:"price"`
	Rid         string `json:"rid"`
	Name        string `json:"name"`
	Sale        int    `json:"sale"`
	Size        string `json:"size"`
	TotalPrice  int    `json:"total_price"`
	NmID        int64  `json:"nm_id"`
	Brand       string `json:"brand"`
	Status      int    `json:"status"`
}

// GetChrtID returns the value of ChrtID.
func (s *OrderItem) GetChrtID() int64 {
	return s.ChrtID
}

// GetTrackNumber returns the value of TrackNumber.
func (s *OrderItem) GetTrackNumber() string {
	return s.TrackNumber
}

// GetPrice returns the value of Price.
func (s *OrderItem) GetPrice() int {
	return s.Price
}

// GetRid returns the value of Rid.
func (s *OrderItem) GetRid() string {
	return s.Rid
}

// GetName returns the value of Name.
func (s *OrderItem) GetName() string {
	return s.Name
}

// GetSale returns the value of Sale.
func (s *OrderItem) GetSale() int {
	return s.Sale
}

// GetSize returns the value of Size.
func (s *OrderItem) GetSize() string {
	return s.Size
}

// GetTotalPrice returns the value of TotalPrice.
func (s *OrderItem) GetTotalPrice() int {
	return s.TotalPrice
}

// GetNmID returns the value of NmID.
func (s *OrderItem) GetNmID() int64 {
	return s.NmID
}

// GetBrand returns the value of Brand.
func (s *OrderItem) GetBrand() string {
	return s.Brand
}

// GetStatus returns the value of Status.
func (s *OrderItem) GetStatus() int {
	return s.Status
}

// SetChrtID sets the value of ChrtID.
func (s *OrderItem) SetChrtID(val int64) {
	s.ChrtID = val
}

// SetTrackNumber sets the value of TrackNumber.
func (s *OrderItem) SetTrackNumber(val string) {
	s.TrackNumber = val
}

// SetPrice sets the value of Price.
func (s *OrderItem) SetPrice(val int) {
	s.Price = val
}

// SetRid sets the value of Rid.
func (s *OrderItem) SetRid(val string) {
	s.Rid = val
}

// SetName sets the value of Name.
func (s *OrderItem) SetName(val string) {
	s.Name = val
}

// SetSale sets the value of Sale.
func (s *OrderItem) SetSale(val int) {
	s.Sale = val
}

// SetSize sets the value of Size.
func (s *OrderItem) SetSize(val string) {
	s.Size = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *OrderItem) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetNmID sets the value of NmID.
func (s *OrderItem) SetNmID(val int64) {
	s.NmID = val
}

// SetBrand sets the value of Brand.
func (s *OrderItem) SetBrand(val string) {
	s.Brand = val
}

// SetStatus sets the value of Status.
func (s *OrderItem) SetStatus(val int) {
	s.Status = val
}

// Ref: #/components/schemas/OrderResponse
type OrderResponse struct {
	OrderUID          string              `json:"order_uid"`
	TrackNumber       string              `json:"track_number"`
	Entry             string              `json:"entry"`
	Delivery          Delivery            `json:"delivery"`
	Payment           Payment             `json:"payment"`
	Items             []OrderItem         `json:"items"`
	Locale            OrderResponseLocale `json:"locale"`
	InternalSignature OptString           `json:"internal_signature"`
	CustomerID        string              `json:"customer_id"`
	DeliveryService   string              `json:"delivery_service"`
	Shardkey          string              `json:"shardkey"`
	SmID              int                 `json:"sm_id"`
	DateCreated       time.Time           `json:"date_created"`
	OofShard          string              `json:"oof_shard"`
}

// GetOrderUID returns the value of OrderUID.
func (s *OrderResponse) GetOrderUID() string {
	return s.OrderUID
}

// GetTrackNumber returns the value of TrackNumber.
func (s *OrderResponse) GetTrackNumber() string {
	return s.TrackNumber
}

// GetEntry returns the value of Entry.
func (s *OrderResponse) GetEntry() string {
	return s.Entry
}

// GetDelivery returns the value of Delivery.
func (s *OrderResponse) GetDelivery() Delivery {
	return s.Delivery
}

// GetPayment returns the value of Payment.
func (s *OrderResponse) GetPayment() Payment {
	return s.Payment
}

// GetItems returns the value of Items.
func (s *OrderResponse) GetItems() []OrderItem {
	return s.Items
}

// GetLocale returns the value of Locale.
func (s *OrderResponse) GetLocale() OrderResponseLocale {
	return s.Locale
}

// GetInternalSignature returns the value of InternalSignature.
func (s *OrderResponse) GetInternalSignature() OptString {
	return s.InternalSignature
}

// GetCustomerID returns the value of CustomerID.
func (s *OrderResponse) GetCustomerID() string {
	return s.CustomerID
}

// GetDeliveryService returns the value of DeliveryService.
func (s *OrderResponse) GetDeliveryService() string {
	return s.DeliveryService
}

// GetShardkey returns the value of Shardkey.
func (s *OrderResponse) GetShardkey() string {
	return s.Shardkey
}

// GetSmID returns the value of SmID.
func (s *OrderResponse) GetSmID() int {
	return s.SmID
}

// GetDateCreated returns the value of DateCreated.
func (s *OrderResponse) GetDateCreated() time.Time {
	return s.DateCreated
}

// GetOofShard returns the value of OofShard.
func (s *OrderResponse) GetOofShard() string {
	return s.OofShard
}

// SetOrderUID sets the value of OrderUID.
func (s *OrderResponse) SetOrderUID(val string) {
	s.OrderUID = val
}

// SetTrackNumber sets the value of TrackNumber.
func (s *OrderResponse) SetTrackNumber(val string) {
	s.TrackNumber = val
}

// SetEntry sets the value of Entry.
func (s *OrderResponse) SetEntry(val string) {
	s.Entry = val
}

// SetDelivery sets the value of Delivery.
func (s *OrderResponse) SetDelivery(val Delivery) {
	s.Delivery = val
}

// SetPayment sets the value of Payment.
func (s *OrderResponse) SetPayment(val Payment) {
	s.Payment = val
}

// SetItems sets the value of Items.
func (s *OrderResponse) SetItems(val []OrderItem) {
	s.Items = val
}

// SetLocale sets the value of Locale.
func (s *OrderResponse) SetLocale(val OrderResponseLocale) {
	s.Locale = val
}

// SetInternalSignature sets the value of InternalSignature.
func (s *OrderResponse) SetInternalSignature(val OptString) {
	s.InternalSignature = val
}

// SetCustomerID sets the value of CustomerID.
func (s *OrderResponse) SetCustomerID(val string) {
	s.CustomerID = val
}

// SetDeliveryService sets the value of DeliveryService.
func (s *OrderResponse) SetDeliveryService(val string) {
	s.DeliveryService = val
}

// SetShardkey sets the value of Shardkey.
func (s *OrderResponse) SetShardkey(val string) {
	s.Shardkey = val
}

// SetSmID sets the value of SmID.
func (s *OrderResponse) SetSmID(val int) {
	s.SmID = val
}

// SetDateCreated sets the value of DateCreated.
func (s *OrderResponse) SetDateCreated(val time.Time) {
	s.DateCreated = val
}

// SetOofShard sets the value of OofShard.
func (s *OrderResponse) SetOofShard(val string) {
	s.OofShard = val
}

func (*OrderResponse) orderIDGetRes() {}

type OrderResponseLocale string

const (
	OrderResponseLocaleEn OrderResponseLocale = "en"
	OrderResponseLocaleRu OrderResponseLocale = "ru"
	OrderResponseLocaleDe OrderResponseLocale = "de"
	OrderResponseLocaleFr OrderResponseLocale = "fr"
	OrderResponseLocaleEs OrderResponseLocale = "es"
	OrderResponseLocaleZh OrderResponseLocale = "zh"
)

// AllValues returns all OrderResponseLocale values.
func (OrderResponseLocale) AllValues() []OrderResponseLocale {
	return []OrderResponseLocale{
		OrderResponseLocaleEn,
		OrderResponseLocaleRu,
		OrderResponseLocaleDe,
		OrderResponseLocaleFr,
		OrderResponseLocaleEs,
		OrderResponseLocaleZh,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderResponseLocale) MarshalText() ([]byte, error) {
	switch s {
	case OrderResponseLocaleEn:
		return []byte(s), nil
	case OrderResponseLocaleRu:
		return []byte(s), nil
	case OrderResponseLocaleDe:
		return []byte(s), nil
	case OrderResponseLocaleFr:
		return []byte(s), nil
	case OrderResponseLocaleEs:
		return []byte(s), nil
	case OrderResponseLocaleZh:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderResponseLocale) UnmarshalText(data []byte) error {
	switch OrderResponseLocale(data) {
	case OrderResponseLocaleEn:
		*s = OrderResponseLocaleEn
		return nil
	case OrderResponseLocaleRu:
		*s = OrderResponseLocaleRu
		return nil
	case OrderResponseLocaleDe:
		*s = OrderResponseLocaleDe
		return nil
	case OrderResponseLocaleFr:
		*s = OrderResponseLocaleFr
		return nil
	case OrderResponseLocaleEs:
		*s = OrderResponseLocaleEs
		return nil
	case OrderResponseLocaleZh:
		*s = OrderResponseLocaleZh
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Payment
type Payment struct {
	Transaction  string          `json:"transaction"`
	RequestID    OptString       `json:"request_id"`
	Currency     PaymentCurrency `json:"currency"`
	Provider     string          `json:"provider"`
	Amount       int             `json:"amount"`
	PaymentDt    int64           `json:"payment_dt"`
	Bank         string          `json:"bank"`
	DeliveryCost int             `json:"delivery_cost"`
	GoodsTotal   int             `json:"goods_total"`
	CustomFee    int             `json:"custom_fee"`
}

// GetTransaction returns the value of Transaction.
func (s *Payment) GetTransaction() string {
	return s.Transaction
}

// GetRequestID returns the value of RequestID.
func (s *Payment) GetRequestID() OptString {
	return s.RequestID
}

// GetCurrency returns the value of Currency.
func (s *Payment) GetCurrency() PaymentCurrency {
	return s.Currency
}

// GetProvider returns the value of Provider.
func (s *Payment) GetProvider() string {
	return s.Provider
}

// GetAmount returns the value of Amount.
func (s *Payment) GetAmount() int {
	return s.Amount
}

// GetPaymentDt returns the value of PaymentDt.
func (s *Payment) GetPaymentDt() int64 {
	return s.PaymentDt
}

// GetBank returns the value of Bank.
func (s *Payment) GetBank() string {
	return s.Bank
}

// GetDeliveryCost returns the value of DeliveryCost.
func (s *Payment) GetDeliveryCost() int {
	return s.DeliveryCost
}

// GetGoodsTotal returns the value of GoodsTotal.
func (s *Payment) GetGoodsTotal() int {
	return s.GoodsTotal
}

// GetCustomFee returns the value of CustomFee.
func (s *Payment) GetCustomFee() int {
	return s.CustomFee
}

// SetTransaction sets the value of Transaction.
func (s *Payment) SetTransaction(val string) {
	s.Transaction = val
}

// SetRequestID sets the value of RequestID.
func (s *Payment) SetRequestID(val OptString) {
	s.RequestID = val
}

// SetCurrency sets the value of Currency.
func (s *Payment) SetCurrency(val PaymentCurrency) {
	s.Currency = val
}

// SetProvider sets the value of Provider.
func (s *Payment) SetProvider(val string) {
	s.Provider = val
}

// SetAmount sets the value of Amount.
func (s *Payment) SetAmount(val int) {
	s.Amount = val
}

// SetPaymentDt sets the value of PaymentDt.
func (s *Payment) SetPaymentDt(val int64) {
	s.PaymentDt = val
}

// SetBank sets the value of Bank.
func (s *Payment) SetBank(val string) {
	s.Bank = val
}

// SetDeliveryCost sets the value of DeliveryCost.
func (s *Payment) SetDeliveryCost(val int) {
	s.DeliveryCost = val
}

// SetGoodsTotal sets the value of GoodsTotal.
func (s *Payment) SetGoodsTotal(val int) {
	s.GoodsTotal = val
}

// SetCustomFee sets the value of CustomFee.
func (s *Payment) SetCustomFee(val int) {
	s.CustomFee = val
}

type PaymentCurrency string

const (
	PaymentCurrencyUSD PaymentCurrency = "USD"
	PaymentCurrencyEUR PaymentCurrency = "EUR"
	PaymentCurrencyRUB PaymentCurrency = "RUB"
	PaymentCurrencyGBP PaymentCurrency = "GBP"
	PaymentCurrencyJPY PaymentCurrency = "JPY"
)

// AllValues returns all PaymentCurrency values.
func (PaymentCurrency) AllValues() []PaymentCurrency {
	return []PaymentCurrency{
		PaymentCurrencyUSD,
		PaymentCurrencyEUR,
		PaymentCurrencyRUB,
		PaymentCurrencyGBP,
		PaymentCurrencyJPY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCurrency) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCurrencyUSD:
		return []byte(s), nil
	case PaymentCurrencyEUR:
		return []byte(s), nil
	case PaymentCurrencyRUB:
		return []byte(s), nil
	case PaymentCurrencyGBP:
		return []byte(s), nil
	case PaymentCurrencyJPY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCurrency) UnmarshalText(data []byte) error {
	switch PaymentCurrency(data) {
	case PaymentCurrencyUSD:
		*s = PaymentCurrencyUSD
		return nil
	case PaymentCurrencyEUR:
		*s = PaymentCurrencyEUR
		return nil
	case PaymentCurrencyRUB:
		*s = PaymentCurrencyRUB
		return nil
	case PaymentCurrencyGBP:
		*s = PaymentCurrencyGBP
		return nil
	case PaymentCurrencyJPY:
		*s = PaymentCurrencyJPY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

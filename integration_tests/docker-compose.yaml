services:
  postgres:
    image: postgres:17-alpine
    restart: always
    user: postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d order_service -U order_service" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 40s

  order_service:
    build:
      context: ../order_service
      dockerfile: ../build/universal_service/Dockerfile
    restart: unless-stopped
    ports:
      - "${ORDER_SERVICE_HTTP_PORT}"
    scale: 3
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ./.env

  simulator_service:
    build:
      context: ../simulator_service
      dockerfile: ../build/universal_service/Dockerfile
    restart: unless-stopped
    ports:
      - "${SIMULATOR_SERVICE_HTTP_PORT}"
    scale: 2
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - ./.env

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    hostname: ${ZOOKEEPER_HOST}
    expose:
      - ${ZOOKEEPER_PORT}

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    restart: unless-stopped
    hostname: ${KAFKA_HOST}
    expose:
      - ${KAFKA_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${ZOOKEEPER_HOST}:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092


      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 10

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    restart: unless-stopped
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/static:/var/static
    depends_on:
      order_service:
        condition: service_started
      simulator_service:
        condition: service_started

  e2e_test:
    build:
      context: ./e2e_test
      dockerfile: ../../build/test_service/Dockerfile
    depends_on:
      order_service:
        condition: service_started
    env_file:
      - ./.env
    network_mode: host
